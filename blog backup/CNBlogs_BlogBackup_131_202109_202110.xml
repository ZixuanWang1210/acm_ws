<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:trackback="http://madskills.com/public/xml/rss/module/trackback/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/"><channel><title>博客园-wzx1210</title><link>https://www.cnblogs.com/wzx1210/</link><description /><language>zh-cn</language><lastBuildDate>Sat, 09 Oct 2021 01:38:37 GMT</lastBuildDate><pubDate>Sat, 09 Oct 2021 01:38:37 GMT</pubDate><ttl>60</ttl><item><title>二分模板 + 讲解笔记</title><link>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384119.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Sat, 09 Oct 2021 01:33:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384119.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h3><a id="_0"></a>二分</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">upper_bound_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_upper</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">lower_bound_search</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_lower</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>
        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> l<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ded6241b8a6177c3358ea1e8052a8b16.png" alt="image-20210909194548647"></p>
                ]]></description></item><item><title>归并排序、快速排序模板</title><link>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384120.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Sat, 09 Oct 2021 01:31:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384120.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h3><a id="_1"></a>快速排序</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">void</span> <span class="token function">q_sort_1</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// do..while()留出空余</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//穿过</span>
        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等于也停下</span>
        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">q_sort_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">q_sort_1</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<pre><code class="prism language-cpp"><span class="token keyword">void</span> <span class="token function">q_sort_2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> x <span class="token operator">=</span> a<span class="token punctuation">[</span>l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">do</span> i<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span> j<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token keyword">while</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">q_sort_2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">q_sort_2</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>详见笔记</p> 
<h3><a id="httpswwwcnblogscomchengxiaop6194356html_31"></a><a href="https://www.cnblogs.com/chengxiao/p/6194356.html">归并排序</a></h3> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/1eb3ae63c5e93151b3eaf2fd886a6f72.png" alt="img"></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f90370b6fb70d1e3650ccdca281ec79e.png" alt="img"></p> 
<pre><code class="prism language-cpp"><span class="token keyword">void</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">&gt;=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//易忘</span>

    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">&gt;&gt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>j <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> temp<span class="token punctuation">[</span>k<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">[</span>j<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> r<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        a<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h5><a id="httpswwwbilibilicomvideoBV1B64y1M7fsfromsearchseid17061572732478670045spm_id_from33333700_57"></a>应用：<a href="https://www.bilibili.com/video/BV1B64y1M7fs?from=search&amp;seid=17061572732478670045&amp;spm_id_from=333.337.0.0">求逆序对</a></h5>
                ]]></description></item><item><title>c++字符串学习笔记</title><link>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384081.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Sat, 09 Oct 2021 01:10:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384081.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a id="string__1"></a>字符串(string 类)</h1> 
<h3><a id="_3"></a>声明</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

string str1<span class="token punctuation">;</span><span class="token comment">//生成空字符串</span>
cin <span class="token operator">&lt;&lt;</span> str1<span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> str1<span class="token punctuation">;</span>

string <span class="token function">str2</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//生成并初始化</span>
cout <span class="token operator">&lt;&lt;</span> str2<span class="token punctuation">;</span>

string <span class="token function">str3</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//hello</span>
cout <span class="token operator">&lt;&lt;</span> str3<span class="token punctuation">;</span>

string <span class="token function">str4</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//HHHHHHHHHH</span>
cout <span class="token operator">&lt;&lt;</span> str4<span class="token punctuation">;</span>

<span class="token keyword">char</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">//hello</span>
string <span class="token function">str5</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> str5<span class="token punctuation">;</span>
</code></pre> 
<h3><a id="append_30"></a>连接（追加）：append()函数</h3> 
<pre><code class="prism language-cpp">string <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> sz<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Word"</span><span class="token punctuation">;</span>
string <span class="token function">str6</span><span class="token punctuation">(</span><span class="token string">"Word"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加单个字符</span>

str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>sz<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加c风格字符串</span>

str<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>str6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//追加字符串</span>
</code></pre> 
<h3><a id="compare_46"></a>比较：compare()函数</h3> 
<p>返回值：0、1、-1</p> 
<p>前 &gt; 后 返回1、前 &lt; 后 返回-1、前 = 后 返回0；</p> 
<pre><code class="prism language-cpp">string <span class="token function">date1</span><span class="token punctuation">(</span><span class="token string">"21"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
string <span class="token function">date2</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
string <span class="token function">date3</span><span class="token punctuation">(</span><span class="token string">"22"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">char</span> date4<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"23"</span><span class="token punctuation">;</span>

cout <span class="token operator">&lt;&lt;</span> date1<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//-1</span>
cout <span class="token operator">&lt;&lt;</span> date2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//1</span>
cout <span class="token operator">&lt;&lt;</span> date2<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>date3<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//0</span>
cout <span class="token operator">&lt;&lt;</span> date3<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>date4<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//-1</span>
</code></pre> 
<h3><a id="find_66"></a>查找：find()函数</h3> 
<pre><code class="prism language-cpp">string <span class="token function">findStr</span><span class="token punctuation">(</span><span class="token string">"ABCDEF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> findStr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> findStr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//第一个参数是要查找的字符，第二个参数是起始查找的位置。返回值为该字符在字符串中的位置int（0位起），若无则返回-1.</span>

<span class="token keyword">char</span> findChar <span class="token operator">=</span> <span class="token string">"BCD"</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> findStr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>findChar<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//返回字串在string中的位置，本题为1</span>

string <span class="token function">findStr1</span><span class="token punctuation">(</span><span class="token string">"ABC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> findStr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>findStr1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="replace_83"></a>替换：replace()函数</h3> 
<pre><code class="prism language-cpp">string <span class="token function">replaceStr</span><span class="token punctuation">(</span><span class="token string">"ABCDEFG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> replaceStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token string">"2345"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先删除C-E，在插入2345. AB2345FG。</span>
cout <span class="token operator">&lt;&lt;</span> replaceStr<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">'M'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//先删除，再插入10个M</span>
</code></pre> 
<h3><a id="incert_93"></a>插入：incert()函数</h3> 
<pre><code class="prism language-cpp">string <span class="token function">incertStr</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
string <span class="token function">incertStr1</span><span class="token punctuation">(</span><span class="token string">"ABCDEF"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cout <span class="token operator">&lt;&lt;</span> incertStr<span class="token punctuation">.</span><span class="token function">incert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> incertStr1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="__erase__substr_103"></a>删除 &amp; 提取子串：erase() &amp; substr()函数</h3> 
<pre><code class="prism language-cpp">string <span class="token function">str_test</span><span class="token punctuation">(</span><span class="token string">"ABCDEFG"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
str_test<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//从D起 删除3个字符</span>

str_test<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回string, 提取DEF。</span>
</code></pre> 
<p><strong>获取字符串长度</strong> <code>str.length()</code></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/ed0afa9b37661d07b952fe4178266576.png" alt="image-20210815211032501"></p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/856b61f076ff7f53b6eaba53187e8f29.png" alt="image-20210817154349696"></p> 
<h3><a id="_124"></a><mark>字符串流（常用于类型转换）</mark></h3> 
<p><a href="https://www.jianshu.com/p/d205a47d1939"><strong>注意</strong></a></p> 
<ol><li>再进行<strong>多次转换</strong>的时候，必须调用stringstream的成员函数clear().</li><li>clear()重置流的标志状态；str()清空流的内存缓冲，重复使用内存消耗不再增加！</li><li>在多次数据类型转换的场景下，必须使用 <code>clear()</code> 方法清空 <code>stringstream</code>，不使用 <code>clear()</code>方法或使用 <code>str("")</code> 方法，都不能得到数据类型转换的正确结果。</li></ol> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sstream&gt;</span> </span>
stringstream stream<span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
stream<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<h6><a id="1_httpswwwjianshucompd205a47d1939_139"></a>用法1 <a href="https://www.jianshu.com/p/d205a47d1939">数据类型的转换</a></h6> 
<pre><code class="prism language-cpp"><span class="token comment">// int -&gt; string</span>
stringstream sstream<span class="token punctuation">;</span>
string strResult<span class="token punctuation">;</span>
<span class="token keyword">int</span> nValue <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>
 
<span class="token comment">// 将int类型的值放入输入流中</span>
sstream <span class="token operator">&lt;&lt;</span> nValue<span class="token punctuation">;</span>
<span class="token comment">// 从sstream中抽取前面插入的int类型的值，赋给string类型</span>
sstream <span class="token operator">&gt;&gt;</span> strResult<span class="token punctuation">;</span>
</code></pre> 
<h6><a id="2_httpswwwjianshucompd205a47d1939_153"></a>用法2 <a href="https://www.jianshu.com/p/d205a47d1939">多字符串的拼接</a></h6> 
<pre><code class="prism language-cpp">stringstream sstream<span class="token punctuation">;</span>
<span class="token comment">// 将多个字符串放入 sstream 中</span>
sstream <span class="token operator">&lt;&lt;</span> <span class="token string">"first"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"string,"</span><span class="token punctuation">;</span>
sstream <span class="token operator">&lt;&lt;</span> <span class="token string">" second string"</span><span class="token punctuation">;</span>
<span class="token comment">// 可以使用 str() 方法，将 stringstream 类型转换为 string 类型；</span>
cout <span class="token operator">&lt;&lt;</span> <span class="token string">"strResult is: "</span> <span class="token operator">&lt;&lt;</span> sstream<span class="token punctuation">.</span><span class="token function">str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
</code></pre> 
<h6><a id="3_httpszhuanlanzhihucomp44435521_164"></a>用法3 <a href="https://zhuanlan.zhihu.com/p/44435521">可以用于分割被空格、制表符等符号分割的字符串</a></h6> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span>  </span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;sstream&gt;</span>        <span class="token comment">//istringstream 必须包含这个头文件</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span>  </span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>  
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>  
    string str<span class="token operator">=</span><span class="token string">"i am a boy"</span><span class="token punctuation">;</span>  
    istringstream <span class="token function">is</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>  
    string s<span class="token punctuation">;</span>  
    <span class="token keyword">while</span><span class="token punctuation">(</span>is<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">)</span>  <span class="token punctuation">{<!-- --></span>  
        cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>  
    <span class="token punctuation">}</span>  
<span class="token punctuation">}</span> 
</code></pre> 
<h6><a id="4_httpsblogcsdnnetjllongbellarticledetails79092891_181"></a>用法4 <a href="https://blog.csdn.net/jllongbell/article/details/79092891">实现任意类型的转换</a></h6> 
<pre><code class="prism language-cpp">　<span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">out_type</span><span class="token punctuation">,</span> <span class="token keyword">typename</span> <span class="token class-name">in_value</span><span class="token operator">&gt;</span>
　　　　out_type <span class="token function">convert</span><span class="token punctuation">(</span><span class="token keyword">const</span> in_value <span class="token operator">&amp;</span> t<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
　　　　　　stringstream stream<span class="token punctuation">;</span>
　　　　　　stream<span class="token operator">&lt;&lt;</span>t<span class="token punctuation">;</span><span class="token comment">//向流中传值</span>
　　　　　　out_type result<span class="token punctuation">;</span><span class="token comment">//这里存储转换结果</span>
　　　　　　stream<span class="token operator">&gt;&gt;</span>result<span class="token punctuation">;</span><span class="token comment">//向result中写入值</span>
　　　　　　<span class="token keyword">return</span> result<span class="token punctuation">;</span>
　　　　<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    string s <span class="token operator">=</span> <span class="token string">"1 23 # 4"</span><span class="token punctuation">;</span>
    stringstream ss<span class="token punctuation">;</span>
    ss<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>ss<span class="token operator">&gt;&gt;</span>s<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        cout<span class="token operator">&lt;&lt;</span>s<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
        <span class="token keyword">int</span> val <span class="token operator">=</span> convert<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>val<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
                ]]></description></item><item><title>STL学习手册</title><link>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384082.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Sat, 09 Oct 2021 00:34:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/10/09/15384082.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a id="STLhttpwwwcpluspluscomreference_1"></a><a href="http://www.cplusplus.com/reference/">STL</a></h1> 
<h2><a id="ChttpswwwbilibilicomvideoBV1DU4y147cE_3"></a><a href="https://www.bilibili.com/video/BV1DU4y147cE">C标准库</a></h2> 
<p><code>strlen()</code> 字符串长度</p> 
<p><code>strcmp()</code> 字符串比较</p> 
<p><code>strcpy()</code> 字符串拷贝</p> 
<p><code>memset()</code> 暴力清空</p> 
<p><code>memcpy()</code> 暴力拷贝</p> 
<p>三角函数、指数函数、浮点取整函数</p> 
<p><code>qsort()</code> C语言快排</p> 
<p><code>rand()</code> 随机数</p> 
<p><code>malloc()</code> <code>free()</code> C语言动态分配内存</p> 
<p><code>time(0)</code> 从1970年到现在的秒数（配合随机数）</p> 
<p><code>clock()</code> 程序启动到目前位置的毫秒数</p> 
<p><code>isdigit()</code>, <code>isalpha()</code>,判断字符是否为数字、大小写字母</p> 
<h3><a id="_47"></a>生成随机数</h3> 
<pre><code class="prism language-cpp"><span class="token comment">//生成随机数</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置随机数种子</span>
    <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//生成一个[0,100)的随机数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<hr> 
<h2><a id="vectorhttpswwwbilibilicomvideoBV1cf4y1k7nTfromsearchseid16135335511621824747_66"></a><a href="https://www.bilibili.com/video/BV1cf4y1k7nT?from=search&amp;seid=16135335511621824747">动态数组（vector）</a></h2> 
<h3><a id="httpswwwrunoobcomw3cnotecppvectorcontaineranalysishtml_68"></a><a href="https://www.runoob.com/w3cnote/cpp-vector-container-analysis.html">成员函数</a></h3> 
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2LFJaH68-1633739580471)()]</p> 
<h3><a id="_72"></a>建立</h3> 
<pre><code class="prism language-cpp"><span class="token comment">//vector的创建</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v1<span class="token punctuation">;</span>
    <span class="token comment">//创建一个存int类型的动态数组，int可以改成其它类型</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">&gt;</span>v2<span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个存double类型的动态数组，长度为6，1 1 2 3 5 8分别存在v[0]~v[5]</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">long</span> <span class="token keyword">long</span><span class="token operator">&gt;</span><span class="token function">v3</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个存long long类型的动态数组，长度为20，v[0]~v[19]默认为0</span>
    vector<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token function">v4</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token string">"zzuacm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//创建一个存string类型的动态数组，长度为20，存的都是"zzuacm"</span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//相当于存int的二维数组，一共3行，每行的列可变</span>
    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span>v5<span class="token punctuation">{<!-- --></span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">//存int的二维数组，行和列都可变，初始状态</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_96"></a>操作</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//向动态数组中插入1~5</span>
    cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出数组的大小，有几个值</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//输出v[0]~v[4]，也就是1~5</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将v清空，此时size为0</span>
    v<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//为v重新开辟大小为10的空间，初始为0</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//遍历每一个元素</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>v<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//当v还不空的话，去掉v的最后一个元素，等同于v.clear();</span>
        v<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="__118"></a>删除 遍历</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>v<span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    v<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除v[3]，v变为{0,1,2,4}</span>
    v<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在v[3]前加上666，v变成{0,1,2,666,4}</span>
    v<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//将v[0]改成10，等同于v[0]=10;</span>
    v<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//将v[4]改成20等同于v[v.size()-1]=20;</span>
    
    <span class="token comment">//下标遍历</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span>v<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//使用下标访问的方法遍历v</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    
    <span class="token comment">//迭代器遍历</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//使用迭代器，从v.begin()到v.end()-1</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">!=</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
        cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token comment">//使用迭代器，从v.begin()到v.end()-1</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>v<span class="token punctuation">)</span><span class="token comment">//使用C++11新特性循环遍历v，如果需要改变i的值，还需要在前面加上&amp;</span>
        cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
    
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_148"></a><mark>迭代器</mark></h3> 
<pre><code class="prism language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//很奇怪的数据类型（对应STL的指针）</span>
<span class="token keyword">auto</span> it<span class="token operator">=</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre> 
<p>在这⾥ <em>it</em> 类似于⼀个<strong>指针</strong>，指向 v 的第⼀个元素</p> 
<p>it 等价于 &amp;<em>v</em>[0]</p> 
<p>*it 等价于 <em>v</em>[0]</p> 
<p>it 也可以进⾏加减操作，例如 it + 3 指向第四个元素</p> 
<p>it++ 后it指向的就是v的第二个元素(<em>v</em>[1])了</p> 
<hr> 
<h2><a id="_169"></a>字符串</h2> 
<h3><a id="_171"></a>成员函数</h3> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/da191a7246e031396480838bf52a1ca4.png" alt="image-20210821191929089"></p> 
<ul><li>所有参数为字符串的地方既可以是string也可以是c字符串</li><li>字符串操作与vector类似，但size,length复杂度较高</li><li>可通过下标访问字符串元素</li></ul> 
<h3><a id="_179"></a>加速读取</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token comment">//#include&lt;string&gt;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    string a<span class="token punctuation">;</span>
    <span class="token keyword">char</span> ch<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>a<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h2><a id="_198"></a>栈</h2> 
<p>是一种线性结构</p> 
<h3><a id="_202"></a>成员函数</h3> 
<p>头文件 </p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/dbee1cd8db937de96f8963c32b77d791.png" alt="image-20210821192627950"></p> 
<h2><a id="_210"></a>队列</h2> 
<h3><a id="httpswwwcnblogscomhdk1993p5809180html_212"></a><a href="https://www.cnblogs.com/hdk1993/p/5809180.html">成员函数</a></h3> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/6a19bccaabd84cc33a6d0bdf9f76b0f7.png" alt="image-20210820191156412"></p> 
<h3><a id="_216"></a>优先队列</h3> 
<p>优先队列是按照优先级出列的。每次的首元素都是优先级最大的。</p> 
<p>优先队列的优先级是以定义的**运算符 &lt;**来说，最大的那个元素。</p> 
<p><code>q.top()</code>获取队列首位（最大）的元素</p> 
<p><mark>注意运算符的重载</mark></p> 
<h2><a id="map_228"></a>map</h2> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/d55c5a7503b5ca1ef32d74db3e0f007c.png" alt="image-20210821193536351"></p> 
<p>内置pair，见后</p> 
<h3><a id="httpswwwcnblogscompanweiweip6657583html_234"></a><a href="https://www.cnblogs.com/panweiwei/p/6657583.html">成员函数</a></h3> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a42443df846ff53a1da9776604d01038.png" alt="image-20210821193658439"></p> 
<h3><a id="_238"></a>遍历</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;map&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>data<span class="token punctuation">;</span>
    data<span class="token punctuation">[</span><span class="token string">"星期天"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    data<span class="token punctuation">[</span><span class="token string">"星期六"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    data<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token string">"星期五"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">for</span><span class="token punctuation">(</span>map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token operator">::</span>iterator it <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        cout<span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>first <span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span> it<span class="token operator">-&gt;</span>second <span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> 
    
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>mp<span class="token punctuation">)</span>
    cout<span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token operator">&lt;&lt;</span>i<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_262"></a>注意</h3> 
<ul><li>有的题目在使用map时会卡时间，原因是map的访问添加都是O(nlogn)。</li><li>遇到这种情况，只需要使用unordered_map，unordered_map 的访问添加是O(1) 。</li><li>除了初始化时写成unordered_map&lt;键类型,值类型&gt;变量名外，其他的操作都是一样的。</li><li>map是有序的，unordered_map是无序的</li></ul> 
<h2><a id="pair_271"></a>pair</h2> 
<p>简易版struct</p> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/f08a3a2a837947c8ffe9efcc71e1b53e.png" alt="image-20210821194329452"></p> 
<h3><a id="_279"></a>构造</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">pii</span> <span class="token expression">pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span></span></span>
<span class="token comment">//#define x first</span>
<span class="token comment">//#define y second</span>
<span class="token keyword">using</span> pii <span class="token operator">=</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
typdef pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    pii <span class="token function">a</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pii b <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> pii<span class="token operator">&gt;</span> <span class="token function">c</span> <span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">auto</span> d <span class="token operator">=</span> c<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h2><a id="set_300"></a>set</h2> 
<ul><li>集合(set)是一种包含对象的容器，可以快速地（logn）查询元素是否在已知几集合中。</li><li>set 中所有元素是有序地，且只能出现⼀次，因为 set 中元素是有序的，所以存储的元素必须已经定义 过「&lt;」运算符（因此如果想在 set 中存放 struct 的话必须⼿动重载「&lt;」运算符，和优先队列一样）</li><li>与set类似的还有 
  <ul><li>multiset元素有序可以出现多次</li><li>unordered_set元素无序只能出现一次</li><li>unordered_multiset元素无序可以出现多次</li></ul> </li></ul> 
<h3><a id="httpswwwcnblogscomzyxStarp4542835html_309"></a><a href="https://www.cnblogs.com/zyxStar/p/4542835.html">成员函数</a></h3> 
<p><img src="https://img-blog.csdnimg.cn/img_convert/a9c476b4c8cff4c7157b5be87acbb984.png" alt="image-20210821203743220"></p> 
<h3><a id="_313"></a>建立与遍历</h3> 
<pre><code class="prism language-cpp"><span class="token comment">//建立方法：</span>
set<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span>s<span class="token punctuation">;</span>
multiset<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span>s<span class="token punctuation">;</span>
unorded_set<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span>s<span class="token punctuation">;</span>
unorded_multiset<span class="token operator">&lt;</span>Type<span class="token operator">&gt;</span>s<span class="token punctuation">;</span>
<span class="token comment">//如果Type无法进行比较，还需要和优先队列一样定义&lt;运算符</span>
<span class="token comment">//遍历方法：</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> i<span class="token operator">:</span>s<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>i<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span>
<span class="token comment">//和vector的类似</span>
</code></pre> 
<h3><a id="_327"></a>查找元素</h3> 
<pre><code class="prism language-cpp">set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>s<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"666 was not in set"</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">666</span><span class="token punctuation">)</span><span class="token punctuation">)</span>；
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_339"></a>注意</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>
    <span class="token keyword">auto</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    i<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">,</span> i<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token comment">//i += 4;   错误</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="httpswwwcnblogscomzhihaospacep12843802html_352"></a><a href="https://www.cnblogs.com/zhihaospace/p/12843802.html">重载比较</a></h3> 
<p>set 容器模版需要3个泛型参数，如下：<code>template&lt;class T, class C, class A&gt; class set;</code><br> 第一个T 是元素类型，必选；<br> 第二个C 指定元素比较方式，缺省为 Less, 即使用 &lt; 符号比较；<br> 第三个A 指定空间分配对象，一般使用默认类型。<br> 因此:<br> （1） 如果第2个泛型参数你使用默认值的话，你的自定义元素类型需要重载 &lt; 运算操作；<br> （2）如果你第2个泛型参数不使用默认值的话，则比较对象必须具有 () 操作，即：<br> <code>bool operator()(const T &amp;a, const T &amp;b)</code></p> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstdio&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> m<span class="token punctuation">,</span>k<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">cmp</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>a<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token operator">&lt;=</span>k<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">return</span> a<span class="token operator">&lt;</span>b<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span>cmp<span class="token operator">&gt;</span> s<span class="token punctuation">;</span>
<span class="token keyword">char</span> op<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> x<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>m<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%s%d"</span><span class="token punctuation">,</span>op<span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
                s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>op<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"Yes"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
                <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"No"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h2><a id="algorithm_409"></a>algorithm</h2> 
<h3><a id="sort_411"></a>sort()</h3> 
<p>sort(first, last, compare)</p> 
<ul><li>first：排序起始位置（指针或 iterator）</li><li>last：排序终⽌位置（指针或 iterator）</li><li>compare：⽐较⽅式，可以省略，省略时默认按升序排序，如果排序的元素没有定义比较运算（如结构体），必须有compare</li><li>sort 排序的范围是 [first, last)，时间为 O(nlogn)</li><li>作用：使指定容器范围内的元素有序，默认从<strong>小到大</strong>排序。</li><li>可以排序所有已经定义的数据类型</li></ul> 
<h5><a id="cmphttpswwwjianshucomp140d3ae0d5cb_422"></a><a href="https://www.jianshu.com/p/140d3ae0d5cb">cmp()</a></h5> 
<p>对于未定义 &lt; 小于号的 数据类型，可以写一个cmp函数来定义排序的规则。</p> 
<p>同样的，基本数据类型也可以通过cmp来自定义排序规则。</p> 
<p><strong>可更改升降序</strong></p> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">st</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> A_score<span class="token punctuation">;</span>
    <span class="token keyword">int</span> B_score<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
st stu<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出stu </span>

<span class="token comment">//降序</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>st a<span class="token punctuation">,</span>st b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//两个关键词的排序</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>A_score <span class="token operator">!=</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>A_score <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>B_score <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>B_score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token comment">//升序</span>
<span class="token keyword">bool</span> <span class="token function">cmp</span><span class="token punctuation">(</span>st a<span class="token punctuation">,</span>st b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token comment">//两个关键词的排序</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>A_score <span class="token operator">!=</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">.</span>A_score <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>B_score <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>B_score<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>A_score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>B_score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"排序前："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span>stu<span class="token operator">+</span>n<span class="token punctuation">,</span>cmp<span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"排序后："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        cout<span class="token operator">&lt;&lt;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>A_score<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>B_score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h5><a id="httpswwwjianshucomp140d3ae0d5cb_478"></a><a href="https://www.jianshu.com/p/140d3ae0d5cb">重载&lt;</a></h5> 
<p>重载结构体的排序规则</p> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;cstdlib&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ctime&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">st</span><span class="token punctuation">{<!-- --></span>
  <span class="token keyword">int</span> A_score<span class="token punctuation">;</span>
  <span class="token keyword">int</span> B_score<span class="token punctuation">;</span>
  <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> st b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-&gt;</span>A_score <span class="token operator">!=</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>A_score <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>B_score <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>B_score<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
st stu<span class="token punctuation">[</span>n<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出stu </span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
  <span class="token function">srand</span><span class="token punctuation">(</span><span class="token function">time</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
      stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>A_score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
      stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>B_score <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  cout<span class="token operator">&lt;&lt;</span><span class="token string">"排序前："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
  <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">sort</span><span class="token punctuation">(</span>stu<span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">,</span>stu<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  cout<span class="token operator">&lt;&lt;</span>endl<span class="token operator">&lt;&lt;</span><span class="token string">"排序后："</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
  <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  
  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">void</span> <span class="token function">putt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
  <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
      cout<span class="token operator">&lt;&lt;</span>stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>A_score<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token operator">&lt;&lt;</span> stu<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>B_score<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="next_permutation_521"></a>next_permutation()</h3> 
<p>作用：用于求序列[first,last)元素全排列中一个排序的下一个排序</p> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">do</span>
    <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>
            cout<span class="token operator">&lt;&lt;</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">' '</span><span class="token punctuation">;</span>
        cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">next_permutation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
    <span class="token comment">//如果有下一个排列  则返回1，否则返回0 . </span>
    <span class="token comment">//即:对于 4 3 2 1，按照字典序来说，它没有下一个排列了，返回0. </span>
</code></pre> 
<p>返回值：如果有下一个排列 则返回1，否则返回0。</p> 
<h3><a id="_546"></a>二分函数</h3> 
<p>lower_bound(first, last, value)</p> 
<ul><li>▸ first：查找起始位置（指针或 iterator）</li><li>▸ last：查找终⽌位置（指针或 iterator）</li><li>▸ value：查找的值</li><li>▸ lower_bound 查找的范围是 [first, last)，返回的是序列中第⼀个大于等于 value 的元素的位置，时间为 O(logn)</li><li>▸ [first, last)范围内的序列必须是提前排好序的，不然会错</li><li>▸ 如果序列内所有元素都⽐ value ⼩，则返回last</li></ul> 
<p>upper_bound(first, last, value)</p> 
<ul><li>▸ upper_bound 与 lower_bound 相似，唯⼀不同的地⽅在于upper_bound 查找的是序列中第⼀个⼤于 value 的元素</li></ul> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要先排序</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出数组中第一个大于等于3的值</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="unique_571"></a>unique()</h3> 
<p>去重函数（unique）</p> 
<p>unique(first, last)：</p> 
<ul><li>▸ [first, last)范围内的值必须是一开始就提前排好序的</li><li>▸ 移除 [first, last) 内连续重复项</li><li>▸ 返回值：去重之后的返回最后一个元素的<strong>下一个地址</strong>（迭代器）</li></ul> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{<!-- --></span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">,</span>n<span class="token punctuation">;</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//需要先排序</span>
    n<span class="token operator">=</span><span class="token function">unique</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span>arr<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">-</span>arr<span class="token punctuation">;</span><span class="token comment">//n是去重后的元素个数</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="reverse_593"></a>reverse()</h3> 
<p>可反转容器等</p> 
<pre><code class="prism language-cpp">string str<span class="token operator">=</span><span class="token string">"hello world , hi"</span><span class="token punctuation">;</span>
<span class="token function">reverse</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//str结果为 ih , dlrow olleh</span>
vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> v <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token function">reverse</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//容器v的值变为1,2,3,4,5</span>
</code></pre> 
<h3><a id="max_604"></a>max()</h3> 
<h3><a id="min_606"></a>min()</h3> 
<h3><a id="swap_608"></a>swap()</h3> 
<p>交换指针，可用于容器</p>
                ]]></description></item><item><title>区间问题汇总</title><link>http://www.cnblogs.com/wzx1210/archive/2021/10/04/15366964.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Mon, 04 Oct 2021 11:30:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/10/04/15366964.html</guid><description><![CDATA[# 区间问题汇总



# [区间合并](https://www.acwing.com/problem/content/805/)

###### Description

给定 $n$ 个区间 $[l_i,r_i][l_i,r_i]$，要求合并所有有交集的区间。

注意如果在端点处相交，也算有交集。

输出合并完成后的区间个数。

例如：$[1,3][1,3] $和$ [2,6][2,6] $可以合并为一个区间$ [1,6][1,6]$。

###### Input

第一行包含整数 $n$。

接下来 $n$ 行，每行包含两个整数 $l$ 和 $r$。

```
5
1 2
2 4
5 6
7 8
7 9
```

###### Output

共一行，包含一个整数，表示合并区间完成后的区间个数。

```
3
```



###### 思路

1. 使用`pair<int, int>`类型的`vector`存储所有集合的左右端点
2. 将所有集合按**左端点**排序
3. 创建`vector`用于存储合并后的集合
4. 若当前集合的左端点大于当前合并集合的右端点，则二者不能合并。
   - 若不是第一个区间：将上一个合并后的区间放入vector，并更新$l, r$为当前值
   - 若是第一个区间：只更新$l, r$为当前值
5. 若当前集合的左端点小于等于当前合并集合的右端点,则二者可以合并。
   - 取当前集合和当前合并集合的最大值，作为当前合并集合的最大值。

###### 代码

```cpp
#include<bits/stdc++.h>
using namespace std;

typedef pair<int,int> pii;
vector<pii> v;
int n;

void merge(vector<pii> &v){
    vector<pii> opt;
    int st = -1e9, ed = -1e9;
    for(auto item : v){
        if(ed < item.first){
            if(st != -1e9) opt.push_back({st, ed});
            st = item.first, ed = item.second;
        }
        else{
            ed = max(ed, item.second);
        }
    }
    if(st != -1e9) opt.push_back({st, ed});
    v = opt;
}

int main(){
    cin >> n;
    for(int i = 0; i < n; i++){
        int l, r;
        cin >> l >> r;
        v.push_back({l, r});
    }
    sort(v.begin(), v.end());

    merge(v);

    cout << v.size();
    
    return 0;
}
```



# [区间选点](https://www.acwing.com/problem/content/907/)

###### Description

给定 $N$ 个闭区间 $[a_i,b_i][a_i,b_i]$，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。

输出选择的点的最小数量。

位于区间端点上的点也算作区间内。

###### Input

第一行包含整数 $n$。

接下来 $n$ 行，每行包含两个整数 $l$ 和 $r$。

```
3
-1 1
2 4
3 5
```

###### Output

```
2
```

###### 思路

其实就是找到相互之间没有任何交集的区间有几个？

1. 所有区间按**右端点**从小到大排序
2. 遍历所有区间：
   - 初始区间为第一个区间
   - 若该区间左端点小于选定区间右端点，`ans++` ，更新该区间为选定区间

###### 代码

```cpp
#include<bits/stdc++.h>
using namespace std;
typedef pair<int, int> pii;
const int maxn = 0x3f3f3f3f;

int n, ans;
vector<pii> v;

int main(){
    cin >> n;
    for(int i = 0; i < n; i++){
        int l, r; cin >> l >> r;
        v.push_back({r, l});
    }

    sort(v.begin(), v.end());

    int st = -maxn, ed = -maxn;
    for(auto x : v){
        if(x.second > ed){
            ans ++;
            ed = x.first;
        }      
    }

    cout << ans;

    return 0;
}
```


# [区间分组](https://www.acwing.com/problem/content/908/)

###### Description

给定 $N$ 个闭区间 $[a_i,b_i][a_i,b_i]$，请你将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。

输出最小组数。

###### Input

第一行包含整数 $n$。

接下来 $n$ 行，每行包含两个整数 $l$ 和 $r$。

```
3
-1 1
2 4
3 5
```

###### Output

```
2
```

###### 思路1

1. 将所有区间按**左端点**从小到大排序
2. 从前往后枚举每个区间，判断能否将其放到某个现有的组中，即是否存在当前区间的的左端点$L$ > 任意组中右端点的最小值的组
   - 如果不存在这样的组，则开新组，然后再将其放进组中
   - 如果存在这样的组，则将其放在符合条件的组中，并更新当前组的右端点的值
3. 为了不用每次选择组时都遍历所有组，可以通过小根堆来维护所有组中的尾端



<u>为什么不按右端点排序？</u>（@小豆冰果Acwing）

比如，有n个人需要用教室，每个人占用教室的起始时间和终止时间是不一样的。

1. 如果想知道只有一间教室，能安排下的最多不冲突人数（不是所有的人都有机会，有的会被舍掉）是多少（区间选点和最大不相交问题），那么当然是最先结束的人排在前面，这样后面的人才有更多机会。如果是按左端点排序，那么如过一个人0点开始用，那么肯定他排在最前面，但是如果他自己就占用了24小时，那么只能给他一个人用了，这样就达不到最大的效果。所以按右端点排序。
2. 如果想知道这些人都必须安排，没有人被舍弃，至少需要多少个教室能安排下（区间分组问题）。那么肯定是按照开始时间排序，开始时间越早越优先。这样每间教室都能得到最充分的利用。

###### 代码1

```cpp
#include<bits/stdc++.h>

```

###### 思路2

我们可以把所有开始时间和结束时间排序，遇到开始时间就把需要的教室加1，遇到结束时间就把需要的教室减1,在一系列需要的教室个数变化的过程中，峰值就是多同时进行的活动数，也是我们至少需要的教室数。

###### 代码2

```cpp
#include <iostream>
#include <algorithm>

using namespace std;

const int N = 100100;

int n;
int b[2 * N], idx;

int main()
{
    cin >> n;
    for(int i = 0; i < n ; i ++)
    {
        int l, r;
        scanf("%d %d", &l, &r);
        b[idx ++] = l * 2;//标记左端点为偶数。
        b[idx ++] = r * 2 + 1;// 标记右端点为奇数。
    }

    sort(b, b + idx);

    int res = 1, t = 0;
    for(int i = 0; i < idx ; i ++)
    {
        if(b[i] % 2 == 0) t ++;
        else t --;
        res = max(res, t);
    }
    cout << res << endl;
    return 0;
}

作者：未来i
链接：https://www.acwing.com/solution/content/8902/
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
```



# [区间覆盖](https://www.acwing.com/problem/content/909/)

###### Description

给定 $N$ 个闭区间 $[a_i,b_i][a_i,b_i]$ 以及一个线段区间 $[s,t][s,t]$，请你选择尽量少的区间，将指定线段区间完全覆盖。

输出最少区间数，如果无法完全覆盖则输出 $−1$。

###### Input

第一行包含两个整数 $s$ 和 $t$，表示给定线段区间的两个端点。

第二行包含整数 $N$，表示给定区间数。

接下来 $N$ 行，每行包含两个整数 $a_i,b_i$，表示一个区间的两个端点。

###### Output

输出一个整数，表示所需最少区间数。

如果无解，则输出 $−1$。

###### 思路

1. 将所有区间按左端点从小到大进行排序
2. 从前往后枚举每个区间，在所有能覆盖s的区间中，选择右端点最大的区间，然后将s更新成右端点的最大值

###### 代码

```cpp
#include<bits/stdc++.h>
using namespace std;
const int maxn = 0x3f3f3f3f;
typedef pair<int, int> pii;

int n, s, t, ans;
bool success;
vector<pii> v;

int main(){
    cin >> s >> t;
    cin >> n;
    for(int i = 0; i < n; i++){
        int l, r; cin >> l >> r;
        v.push_back({l, r});
    }

    sort(v.begin(), v.end());

    for(int i = 0; i < v.size(); i++){
        int j = i,tmp = s;
        while(v[j].first <= s && j < n){
            tmp = max(tmp, v[j].second);
            j++;
        }
        if(s == tmp || tmp < s){
            ans = -1;
            break;
        }
        ans++;
        if(tmp >= t){
            success = true;
            break;
        }
        s = tmp;
        i = j - 1;
    }

    if(success)cout<<ans;
    else cout <<-1;

    return 0;
}
```
]]></description></item><item><title>最全区间问题汇总（区间合并，区间选点，区间分组，区间覆盖）</title><link>http://www.cnblogs.com/wzx1210/archive/2021/10/04/15367024.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Mon, 04 Oct 2021 09:11:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/10/04/15367024.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a id="_0"></a>区间问题汇总</h1> 
<h3><a id="httpswwwacwingcomproblemcontent805_4"></a><a href="https://www.acwing.com/problem/content/805/">区间合并</a></h3> 
<h6><a id="Description_6"></a>Description</h6> 
<p>给定 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 个区间 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        [
       
       
        
         l
        
        
         i
        
       
       
        ,
       
       
        
         r
        
        
         i
        
       
       
        ]
       
       
        [
       
       
        
         l
        
        
         i
        
       
       
        ,
       
       
        
         r
        
        
         i
        
       
       
        ]
       
      
      
       [l_i,r_i][l_i,r_i]
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: -0.01968em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: -0.02778em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: -0.01968em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: -0.02778em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span>，要求合并所有有交集的区间。</p> 
<p>注意如果在端点处相交，也算有交集。</p> 
<p>输出合并完成后的区间个数。</p> 
<p>例如：$[1,3][1,3] <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        和
       
      
      
       和
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0em; vertical-align: 0em;"></span><span class="mord cjk_fallback">和</span></span></span></span></span> [2,6][2,6] <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        可
       
       
        以
       
       
        合
       
       
        并
       
       
        为
       
       
        一
       
       
        个
       
       
        区
       
       
        间
       
      
      
       可以合并为一个区间
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0em; vertical-align: 0em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">并</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">区</span><span class="mord cjk_fallback">间</span></span></span></span></span> [1,6][1,6]$。</p> 
<h6><a id="Input_16"></a>Input</h6> 
<p>第一行包含整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span>。</p> 
<p>接下来 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 行，每行包含两个整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        l
       
      
      
       l
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.69444em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span></span></span></span></span> 和 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        r
       
      
      
       r
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span></span></span></span></span>。</p> 
<pre><code>5
1 2
2 4
5 6
7 8
7 9
</code></pre> 
<h6><a id="Output_31"></a>Output</h6> 
<p>共一行，包含一个整数，表示合并区间完成后的区间个数。</p> 
<pre><code>3
</code></pre> 
<h6><a id="_41"></a>思路</h6> 
<ol><li>使用<code>pair&lt;int, int&gt;</code>类型的<code>vector</code>存储所有集合的左右端点</li><li>将所有集合按<strong>左端点</strong>排序</li><li>创建<code>vector</code>用于存储合并后的集合</li><li>若当前集合的左端点大于当前合并集合的右端点，则二者不能合并。 
  <ul><li>若不是第一个区间：将上一个合并后的区间放入vector，并更新<span class="katex--inline"><span class="katex"><span class="katex-mathml">
       
        
         
          
           l
          
          
           ,
          
          
           r
          
         
         
          l, r
         
        
       </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span></span></span></span></span>为当前值</li><li>若是第一个区间：只更新<span class="katex--inline"><span class="katex"><span class="katex-mathml">
       
        
         
          
           l
          
          
           ,
          
          
           r
          
         
         
          l, r
         
        
       </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span></span></span></span></span>为当前值</li></ul> </li><li>若当前集合的左端点小于等于当前合并集合的右端点,则二者可以合并。 
  <ul><li>取当前集合和当前合并集合的最大值，作为当前合并集合的最大值。</li></ul> </li></ol> 
<h6><a id="_52"></a>代码</h6> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>
<span class="token keyword">int</span> n<span class="token punctuation">;</span>

<span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> <span class="token operator">&amp;</span>v<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> opt<span class="token punctuation">;</span>
    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">,</span> ed <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> item <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>ed <span class="token operator">&lt;</span> item<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>st <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">)</span> opt<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>st<span class="token punctuation">,</span> ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            st <span class="token operator">=</span> item<span class="token punctuation">.</span>first<span class="token punctuation">,</span> ed <span class="token operator">=</span> item<span class="token punctuation">.</span>second<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
            ed <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>ed<span class="token punctuation">,</span> item<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>st <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1e9</span><span class="token punctuation">)</span> opt<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>st<span class="token punctuation">,</span> ed<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    v <span class="token operator">=</span> opt<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
        cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">merge</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>

    cout <span class="token operator">&lt;&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="httpswwwacwingcomproblemcontent907_97"></a><a href="https://www.acwing.com/problem/content/907/">区间选点</a></h3> 
<h6><a id="Description_99"></a>Description</h6> 
<p>给定 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        N
       
      
      
       N
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.10903em;">N</span></span></span></span></span> 个闭区间 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        [
       
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
       
        ]
       
       
        [
       
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
       
        ]
       
      
      
       [a_i,b_i][a_i,b_i]
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span>，请你在数轴上选择尽量少的点，使得每个区间内至少包含一个选出的点。</p> 
<p>输出选择的点的最小数量。</p> 
<p>位于区间端点上的点也算作区间内。</p> 
<h6><a id="Input_107"></a>Input</h6> 
<p>第一行包含整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span>。</p> 
<p>接下来 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 行，每行包含两个整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        l
       
      
      
       l
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.69444em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span></span></span></span></span> 和 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        r
       
      
      
       r
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span></span></span></span></span>。</p> 
<pre><code>3
-1 1
2 4
3 5
</code></pre> 
<h6><a id="Output_120"></a>Output</h6> 
<pre><code>2
</code></pre> 
<h6><a id="_126"></a>思路</h6> 
<p>其实就是找到相互之间没有任何交集的区间有几个？</p> 
<ol><li>所有区间按<strong>右端点</strong>从小到大排序</li><li>遍历所有区间： 
  <ul><li>初始区间为第一个区间</li><li>若该区间左端点小于选定区间右端点，<code>ans++</code> ，更新该区间为选定区间</li></ul> </li></ol> 
<h6><a id="_135"></a>代码</h6> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>r<span class="token punctuation">,</span> l<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> st <span class="token operator">=</span> <span class="token operator">-</span>maxn<span class="token punctuation">,</span> ed <span class="token operator">=</span> <span class="token operator">-</span>maxn<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>second <span class="token operator">&gt;</span> ed<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            ans <span class="token operator">++</span><span class="token punctuation">;</span>
            ed <span class="token operator">=</span> x<span class="token punctuation">.</span>first<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>      
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="httpswwwacwingcomproblemcontent908_171"></a><a href="https://www.acwing.com/problem/content/908/">区间分组</a></h3> 
<h6><a id="Description_173"></a>Description</h6> 
<p>给定 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        N
       
      
      
       N
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.10903em;">N</span></span></span></span></span> 个闭区间 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        [
       
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
       
        ]
       
       
        [
       
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
       
        ]
       
      
      
       [a_i,b_i][a_i,b_i]
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span>，请你将这些区间分成若干组，使得每组内部的区间两两之间（包括端点）没有交集，并使得组数尽可能小。</p> 
<p>输出最小组数。</p> 
<h6><a id="Input_179"></a>Input</h6> 
<p>第一行包含整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span>。</p> 
<p>接下来 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        n
       
      
      
       n
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">n</span></span></span></span></span> 行，每行包含两个整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        l
       
      
      
       l
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.69444em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.01968em;">l</span></span></span></span></span> 和 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        r
       
      
      
       r
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.02778em;">r</span></span></span></span></span>。</p> 
<pre><code>3
-1 1
2 4
3 5
</code></pre> 
<h6><a id="Output_192"></a>Output</h6> 
<pre><code>2
</code></pre> 
<h6><a id="1_198"></a>思路1</h6> 
<ol><li>将所有区间按<strong>左端点</strong>从小到大排序</li><li>从前往后枚举每个区间，判断能否将其放到某个现有的组中，即是否存在当前区间的的左端点<span class="katex--inline"><span class="katex"><span class="katex-mathml">
     
      
       
        
         L
        
       
       
        L
       
      
     </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathdefault">L</span></span></span></span></span> &gt; 任意组中右端点的最小值的组 
  <ul><li>如果不存在这样的组，则开新组，然后再将其放进组中</li><li>如果存在这样的组，则将其放在符合条件的组中，并更新当前组的右端点的值</li></ul> </li><li>为了不用每次选择组时都遍历所有组，可以通过小根堆来维护所有组中的尾端</li></ol> 
<p><u>为什么不按右端点排序？</u>（@小豆冰果Acwing）</p> 
<p>比如，有n个人需要用教室，每个人占用教室的起始时间和终止时间是不一样的。</p> 
<ol><li>如果想知道只有一间教室，能安排下的最多不冲突人数（不是所有的人都有机会，有的会被舍掉）是多少（区间选点和最大不相交问题），那么当然是最先结束的人排在前面，这样后面的人才有更多机会。如果是按左端点排序，那么如过一个人0点开始用，那么肯定他排在最前面，但是如果他自己就占用了24小时，那么只能给他一个人用了，这样就达不到最大的效果。所以按右端点排序。</li><li>如果想知道这些人都必须安排，没有人被舍弃，至少需要多少个教室能安排下（区间分组问题）。那么肯定是按照开始时间排序，开始时间越早越优先。这样每间教室都能得到最充分的利用。</li></ol> 
<h6><a id="1_215"></a>代码1</h6> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> v<span class="token punctuation">,</span> opt<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;&gt;</span> heap<span class="token punctuation">;</span>
    heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>maxn<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">auto</span> x <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>first <span class="token operator">&gt;</span> heap<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            heap<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
            ans <span class="token operator">++</span><span class="token punctuation">;</span>
            heap<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    cout <span class="token operator">&lt;&lt;</span> ans<span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h6><a id="2_255"></a>思路2</h6> 
<p>我们可以把所有开始时间和结束时间排序，遇到开始时间就把需要的教室加1，遇到结束时间就把需要的教室减1,在一系列需要的教室个数变化的过程中，峰值就是多同时进行的活动数，也是我们至少需要的教室数。</p> 
<h6><a id="2_259"></a>代码2</h6> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm&gt;</span></span>

<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token keyword">int</span> N <span class="token operator">=</span> <span class="token number">100100</span><span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">;</span>
<span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> N<span class="token punctuation">]</span><span class="token punctuation">,</span> idx<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>l<span class="token punctuation">,</span> <span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
        b<span class="token punctuation">[</span>idx <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> l <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//标记左端点为偶数。</span>
        b<span class="token punctuation">[</span>idx <span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// 标记右端点为奇数。</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> b <span class="token operator">+</span> idx<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> idx <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> t <span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> t <span class="token operator">--</span><span class="token punctuation">;</span>
        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

作者：未来i
链接：https<span class="token operator">:</span><span class="token comment">//www.acwing.com/solution/content/8902/</span>
来源：AcWing
著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。
</code></pre> 
<h3><a id="httpswwwacwingcomproblemcontent909_304"></a><a href="https://www.acwing.com/problem/content/909/">区间覆盖</a></h3> 
<h6><a id="Description_306"></a>Description</h6> 
<p>给定 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        N
       
      
      
       N
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.10903em;">N</span></span></span></span></span> 个闭区间 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        [
       
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
       
        ]
       
       
        [
       
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
       
        ]
       
      
      
       [a_i,b_i][a_i,b_i]
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span><span class="mopen">[</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mclose">]</span></span></span></span></span> 以及一个线段区间 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        [
       
       
        s
       
       
        ,
       
       
        t
       
       
        ]
       
       
        [
       
       
        s
       
       
        ,
       
       
        t
       
       
        ]
       
      
      
       [s,t][s,t]
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 1em; vertical-align: -0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span><span class="mopen">[</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span></span>，请你选择尽量少的区间，将指定线段区间完全覆盖。</p> 
<p>输出最少区间数，如果无法完全覆盖则输出 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        −
       
       
        1
       
      
      
       −1
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></span>。</p> 
<h6><a id="Input_312"></a>Input</h6> 
<p>第一行包含两个整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        s
       
      
      
       s
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.43056em; vertical-align: 0em;"></span><span class="mord mathdefault">s</span></span></span></span></span> 和 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        t
       
      
      
       t
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.61508em; vertical-align: 0em;"></span><span class="mord mathdefault">t</span></span></span></span></span>，表示给定线段区间的两个端点。</p> 
<p>第二行包含整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        N
       
      
      
       N
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.10903em;">N</span></span></span></span></span>，表示给定区间数。</p> 
<p>接下来 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        N
       
      
      
       N
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.68333em; vertical-align: 0em;"></span><span class="mord mathdefault" style="margin-right: 0.10903em;">N</span></span></span></span></span> 行，每行包含两个整数 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        
         a
        
        
         i
        
       
       
        ,
       
       
        
         b
        
        
         i
        
       
      
      
       a_i,b_i
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.88888em; vertical-align: -0.19444em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right: 0.166667em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height: 0.311664em;"><span class="" style="top: -2.55em; margin-left: 0em; margin-right: 0.05em;"><span class="pstrut" style="height: 2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height: 0.15em;"><span class=""></span></span></span></span></span></span></span></span></span></span>，表示一个区间的两个端点。</p> 
<h6><a id="Output_320"></a>Output</h6> 
<p>输出一个整数，表示所需最少区间数。</p> 
<p>如果无解，则输出 <span class="katex--inline"><span class="katex"><span class="katex-mathml">
    
     
      
       
        −
       
       
        1
       
      
      
       −1
      
     
    </span><span class="katex-html"><span class="base"><span class="strut" style="height: 0.72777em; vertical-align: -0.08333em;"></span><span class="mord">−</span><span class="mord">1</span></span></span></span></span>。</p> 
<h6><a id="_326"></a>思路</h6> 
<ol><li>将所有区间按左端点从小到大进行排序</li><li>从前往后枚举每个区间，在所有能覆盖s的区间中，选择右端点最大的区间，然后将s更新成右端点的最大值</li></ol> 
<h6><a id="_331"></a>代码</h6> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdc++.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> maxn <span class="token operator">=</span> <span class="token number">0x3f3f3f3f</span><span class="token punctuation">;</span>
<span class="token keyword">typedef</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pii<span class="token punctuation">;</span>

<span class="token keyword">int</span> n<span class="token punctuation">,</span> s<span class="token punctuation">,</span> t<span class="token punctuation">,</span> ans<span class="token punctuation">;</span>
<span class="token keyword">bool</span> success<span class="token punctuation">;</span>
vector<span class="token operator">&lt;</span>pii<span class="token operator">&gt;</span> v<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cin <span class="token operator">&gt;&gt;</span> s <span class="token operator">&gt;&gt;</span> t<span class="token punctuation">;</span>
    cin <span class="token operator">&gt;&gt;</span> n<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> l<span class="token punctuation">,</span> r<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> l <span class="token operator">&gt;&gt;</span> r<span class="token punctuation">;</span>
        v<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span>l<span class="token punctuation">,</span> r<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token function">sort</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
	<span class="token comment">//双指针思想</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">,</span>tmp <span class="token operator">=</span> s<span class="token punctuation">;</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>first <span class="token operator">&lt;=</span> s <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            tmp <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span> v<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>
            j<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>s <span class="token operator">==</span> tmp <span class="token operator">||</span> tmp <span class="token operator">&lt;</span> s<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            ans <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        ans<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>tmp <span class="token operator">&gt;=</span> t<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        s <span class="token operator">=</span> tmp<span class="token punctuation">;</span>
        i <span class="token operator">=</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>success<span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span>ans<span class="token punctuation">;</span>
    <span class="token keyword">else</span> cout <span class="token operator">&lt;&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
                ]]></description></item><item><title>指针与引用学习笔记</title><link>http://www.cnblogs.com/wzx1210/archive/2021/09/29/15367025.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Wed, 29 Sep 2021 11:34:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/09/29/15367025.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a id="_1"></a>指针与引用</h1> 
<h3><a id="_2"></a>指针的基本用法</h3> 
<ol><li>指针的定义</li><li>使用指针改变地址</li><li>使用指针更改变量的值</li></ol> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
p <span class="token operator">=</span> <span class="token operator">&amp;</span>a<span class="token punctuation">;</span> <span class="token comment">//指针的赋值：将a的内存地址赋值指针p</span>
<span class="token operator">*</span>p <span class="token operator">=</span> b<span class="token punctuation">;</span> <span class="token comment">//指针的赋值：将(int)b=5的值赋给(int)a</span>
</code></pre> 
<p>注：&amp; 表示取址、* 表示取值</p> 
<p>&amp;a 的数据类型为<mark>int型指针</mark>；*p数据类型为<mark>整型int</mark></p> 
<h3><a id="_19"></a>结构体指针</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">incldue</span><span class="token expression"><span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    node<span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> _value<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        value <span class="token operator">=</span> _value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
node<span class="token operator">*</span> head<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用new动态开辟head指向node的空间</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对head内部的next进行操作（用new动态开辟head的next指向node的空间）</span>
    node<span class="token operator">*</span> second <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//声明一个node型的指针名为second</span>
    
    cout <span class="token operator">&lt;&lt;</span> head<span class="token operator">-&gt;</span>value <span class="token operator">&lt;&lt;</span> second<span class="token operator">-&gt;</span>value <span class="token operator">&lt;&lt;</span> head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_43"></a>指针作为参数传递</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">,</span> <span class="token operator">*</span>b <span class="token operator">=</span> c；
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="cpp_60"></a>cpp引用</h3> 
<p>引用是某一个变量或对象的<strong>别名</strong>，对引用的操作与对其所绑定的变量或对象的操作完全等价。</p> 
<pre><code class="prism language-cpp"><span class="token comment">//常量的引用</span>
<span class="token comment">//语法：类型 &amp;引用名=目标变量名；</span>
<span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token operator">&amp;</span>b <span class="token operator">=</span> a<span class="token punctuation">;</span>
std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>

<span class="token comment">//数组的引用</span>
<span class="token comment">//语法：类型 (&amp;引用名)[数组中元素数量]=数组名；</span>
<span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{<!-- --></span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>
std<span class="token operator">::</span>cout<span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre> 
<p>注意：</p> 
<ol><li>&amp;不是求地址运算符，而是起标志作用</li><li>引用的类型必须和其所绑定的变量的类型相同</li><li>声明引用的同时<strong>必须对其初始化</strong>，否则系统会报错</li><li>引用相当于变量或对象的别名，因此<strong>不能再将已有的引用名作为其他变量或对象的名字或别名</strong></li><li>引用不是定义一个新的变量或对象，因此<strong>内存不会为引用开辟新的空间存储这个引用</strong></li></ol> 
<h3><a id="_88"></a>引用作为参数传递</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>x<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> c<span class="token punctuation">;</span>
    c <span class="token operator">=</span> a<span class="token punctuation">,</span> a <span class="token operator">=</span> b<span class="token punctuation">,</span> b <span class="token operator">=</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_106"></a>常引用</h3> 
<p><a href="https://www.cnblogs.com/mlgjb/p/8821340.html">来源</a></p> 
<p>常引用声明方式：const 类型标识符 &amp;引用名=目标变量名；</p> 
<p>用这种方式声明的引用，不能通过引用对目标变量的值进行修改,从而使引用的目标成为const，达到了引用的安全性。</p> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> a <span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>ra<span class="token operator">=</span>a<span class="token punctuation">;</span>
ra<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//错误</span>
a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//正确</span>
</code></pre>
                ]]></description></item><item><title>算法竞赛中C++的简单特性（构造函数、IO、new动态内存、重载）学习笔记</title><link>http://www.cnblogs.com/wzx1210/archive/2021/09/29/15367026.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Wed, 29 Sep 2021 11:29:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/09/29/15367026.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h1><a id="c_httpswwwbilibilicomvideoBV1DU4y147cE_1"></a><a href="https://www.bilibili.com/video/BV1DU4y147cE">c++ 的特性</a></h1> 
<h3><a id="_3"></a>结构体的构造函数</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token comment">//构造函数的写法1</span>
<span class="token keyword">struct</span> <span class="token class-name">st</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">st</span><span class="token punctuation">(</span><span class="token keyword">int</span> _a<span class="token punctuation">,</span> <span class="token keyword">int</span> _b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        a <span class="token operator">=</span> _a<span class="token punctuation">;</span>
        b <span class="token operator">=</span> _b<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">//构造函数的写法2</span>
<span class="token keyword">struct</span> <span class="token class-name">st_</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
    <span class="token function">st_</span><span class="token punctuation">(</span><span class="token keyword">int</span> a_<span class="token punctuation">,</span> <span class="token keyword">int</span> b_<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">a</span><span class="token punctuation">(</span>a_<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span>b_<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>
    <span class="token comment">//st_(int a_ = 0, int b_):a(a_), b(b_){} 错误</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    st newSt <span class="token operator">=</span> <span class="token function">st</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用结构体的构造函数</span>
    st <span class="token function">newSt_</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//st newSt1;//编译错误：函数的缺省值</span>
    cout <span class="token operator">&lt;&lt;</span> newSt<span class="token punctuation">.</span>a <span class="token operator">&lt;&lt;</span> newSt<span class="token punctuation">.</span>b<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">/*
构造函数的写法1
结构体名（参数列表）{
    赋值语句
}

构造函数的写法2
结构体名（参数列表）：结构体成员（参数），结构体成员（参数）{} 
*/</span>
</code></pre> 
<ul><li>构造函数的<strong>返回值是一个结构体</strong></li><li>构造函数与结构体<strong>重名</strong></li><li>结构体的构造函数在创建结构体是<strong>自动调用</strong></li><li>写了构造函数后，原本的无参构造函数会消失，声明是必须使用构造函数</li></ul> 
<h3><a id="_51"></a>常见输入输出</h3> 
<ul><li> <p><code>getline()</code>读入包含空格的整行数据</p> 
  <ul><li><code>getline(cin, 字符串变量名字)；</code></li><li><code>getline(字符串变量名字， 读入字符上线)；</code></li><li><code>getline()</code>前如有其他操作，必须加入<code>getchar()</code>来吞掉换行符<code>/n</code></li></ul> </li><li> <p>循环读入直到文件结束（判断EOF结束循环）</p> 
  <ul><li> <pre><code class="prism language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">,</span> b<span class="token punctuation">;</span>
<span class="token keyword">while</span><span class="token punctuation">(</span>cin <span class="token operator">&gt;&gt;</span> a <span class="token operator">&gt;&gt;</span> b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>

<span class="token punctuation">}</span>
</code></pre> </li></ul> </li></ul> 
<h3><a id="_70"></a>动态内存分配</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">incldue</span><span class="token expression"><span class="token operator">&lt;</span>iostream<span class="token operator">&gt;</span></span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> value<span class="token punctuation">;</span>
    node<span class="token operator">*</span> next<span class="token punctuation">;</span>
    <span class="token function">node</span><span class="token punctuation">(</span><span class="token keyword">int</span> _value<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        value <span class="token operator">=</span> _value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
node<span class="token operator">*</span> head<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//用new动态开辟head指向node的空间//node变量的地址赋值在head</span>
    head<span class="token operator">-&gt;</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">node</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//对head内部的next进行操作（用new动态开辟head的next指向node的空间）</span>
    node<span class="token operator">*</span> second <span class="token operator">=</span> head<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span><span class="token comment">//声明一个node型的指针名为second</span>
    
    cout <span class="token operator">&lt;&lt;</span> head<span class="token operator">-&gt;</span>value <span class="token operator">&lt;&lt;</span> second<span class="token operator">-&gt;</span>value <span class="token operator">&lt;&lt;</span> head<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>value<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<ul><li>动态内存的分配一般用于新建结构体上</li><li>可以不用释放内存</li></ul> 
<h3><a id="_100"></a>函数的重载</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"���õ��� int sum(int a)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"���õ��� double sum(double a)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
<span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    cout<span class="token operator">&lt;&lt;</span><span class="token string">"���õ��� sum(int a,int b)"</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">double</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    
    cout<span class="token operator">&lt;&lt;</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token function">sum</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    cout<span class="token operator">&lt;&lt;</span><span class="token function">sum</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<ul><li> <p>cpp中区别不同函数不仅靠函数名，对于不同的函数至少满足一下一种情况：</p> 
  <ul><li> <p>函数名不同</p> </li><li> <p>形参类型或数量不同</p> </li><li> <p>有缺省值不引起<strong>调用时</strong>的歧义</p> 
    <ul><li> <pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>
<span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>
<span class="token comment">//返回值不能区别函数</span>
</code></pre> </li></ul> </li></ul> <h5><a id="_147"></a>函数的缺省值</h5> <p>在cpp的形参列表中可以允许缺省值的存在，在没有传入对应变量时，使用的就是缺省值</p> <p>但使用时要遵循：</p> <p>参数列表从左往右，一旦出现缺省值参数后，后面的参数也必须带有缺省值</p> <pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
  cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
  <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>   
</code></pre> </li></ul> 
<h3><a id="_169"></a>运算符的重载</h3> 
<p>写法一：</p> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">str</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> A_score<span class="token punctuation">,</span> B_score<span class="token punctuation">;</span>
    <span class="token function">str</span><span class="token punctuation">(</span><span class="token keyword">int</span> _A<span class="token punctuation">,</span> <span class="token keyword">int</span> _B<span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">A_score</span><span class="token punctuation">(</span>_A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B_score</span><span class="token punctuation">(</span>_B<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span><span class="token punctuation">}</span>
    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> str b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-&gt;</span>A_score <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>A_score<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>    
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment">/*
bool operator 运算符(const 结构体名称 b){
    return 什么是时候这个运算符对结构体成立；
}
*/</span>
<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    str <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>写法二：</p> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bit/stdcpp.h&gt;</span></span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">node</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>node a<span class="token punctuation">,</span> node b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">return</span> a<span class="token punctuation">.</span>x <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>x
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    priority_queue<span class="token operator">&lt;</span>node<span class="token operator">&gt;</span> pq<span class="token punctuation">;</span>
    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    pq<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{<!-- --></span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>pq<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        cout <span class="token operator">&lt;&lt;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x <span class="token operator">&lt;&lt;</span> pq<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
        pq<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<p>优先队列中如果是结构体这种无法直接比较的元素，必须要重载运算符&lt;，使其可以比较。</p>
                ]]></description></item><item><title>c++ 高精度模板 算法竞赛</title><link>http://www.cnblogs.com/wzx1210/archive/2021/09/29/15367027.html</link><dc:creator>wzx1210</dc:creator><author>wzx1210</author><pubDate>Wed, 29 Sep 2021 11:13:00 GMT</pubDate><guid>http://www.cnblogs.com/wzx1210/archive/2021/09/29/15367027.html</guid><description><![CDATA[
                    <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">
                        <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"></path>
                    </svg>
                    <h3><a id="_1"></a>大整数存储</h3> 
<p>定义int型数组d[l000], 那么这个数组中的每一位就代表了存放的整数的每一位。如将整数235813 存储到数组中，则有d[0] = 3, d[l] = 1, d[2] = 8, d[3] = 5, d[4] = 3, d[5] = 2, 即整数的高位存储在数组的高位，整数的低位存储在数组的低位。</p> 
<pre><code class="prism language-cpp"><span class="token keyword">struct</span> <span class="token class-name">bign</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token function">bign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre> 
<h3><a id="_16"></a>大整数读入</h3> 
<p>输入大整数时，一般都是先用字符串读入，然后再把字符串另存为至bign结构体。由于使用char 数组进行读入时， 整数的高位会变成数组的低位， 而整数的低位会变成数组的高位， 因此为了让整数在bign中是顺位存储， 需要让字符串倒着赋给a[]数组。</p> 
<pre><code class="prism language-cpp">bign <span class="token function">putt</span><span class="token punctuation">(</span>bign a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    string str<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">[</span>a<span class="token punctuation">.</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_31"></a>大整数比较</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>bign a<span class="token punctuation">,</span> bign b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>len <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>len <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_47"></a>大整数输出</h3> 
<pre><code class="prism language-cpp"><span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>bign a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_57"></a>大整数加法</h3> 
<pre><code class="prism language-cpp">bign <span class="token function">add</span><span class="token punctuation">(</span>bign a<span class="token punctuation">,</span> bign b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    bign c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>len <span class="token operator">||</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>
        carry <span class="token operator">=</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> carry<span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_73"></a>大整数减法</h3> 
<p>通过引用，实现大减小。</p> 
<pre><code class="prism language-cpp">bign <span class="token function">sub</span><span class="token punctuation">(</span>bign <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> bign <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bign c<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>len <span class="token operator">||</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        c<span class="token punctuation">.</span>len<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre> 
<h3><a id="_95"></a>总结</h3> 
<pre><code class="prism language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;bits/stdcpp.h&gt;</span></span>
<span class="token comment">//#define MAXN 1e3;</span>
<span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>

<span class="token keyword">struct</span> <span class="token class-name">bign</span>
<span class="token punctuation">{<!-- --></span>
    <span class="token keyword">int</span> d<span class="token punctuation">[</span><span class="token number">1005</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> len<span class="token punctuation">;</span>
    <span class="token function">bign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token function">memset</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        len<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

bign <span class="token function">putt</span><span class="token punctuation">(</span>bign a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    string str<span class="token punctuation">;</span> cin <span class="token operator">&gt;&gt;</span> str<span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>len<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>str<span class="token punctuation">[</span>a<span class="token punctuation">.</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token string">'0'</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> a<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span>bign a<span class="token punctuation">,</span> bign b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>len <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>len <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span>bign a<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        cout <span class="token operator">&lt;&lt;</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bign <span class="token function">add</span><span class="token punctuation">(</span>bign a<span class="token punctuation">,</span> bign b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    bign c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> 
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>len <span class="token operator">||</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>
        carry <span class="token operator">=</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
        c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>carry <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> carry<span class="token punctuation">;</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

bign <span class="token function">sub</span><span class="token punctuation">(</span>bign <span class="token operator">&amp;</span>a<span class="token punctuation">,</span> bign <span class="token operator">&amp;</span>b<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">compare</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bign c<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>len <span class="token operator">||</span> i <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
            a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>
            a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> b<span class="token punctuation">.</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">.</span>d<span class="token punctuation">[</span>c<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
        c<span class="token punctuation">.</span>len<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> c<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>
    bign a <span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token function">putt</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bign b<span class="token punctuation">;</span>
    b <span class="token operator">=</span> <span class="token function">putt</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bign c<span class="token punctuation">;</span>
    c <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>
    bign d<span class="token punctuation">;</span>
    d <span class="token operator">=</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
                ]]></description></item></channel></rss>